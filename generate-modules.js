const { join, basename, dirname } = require('path');
const { copyFileSync, writeFileSync } = require('fs');
const compact = require('lodash/compact');
const glob = require('glob');

const modulePaths = glob.sync('./modules/*/client/*.client.module.js');

const types = ['config', 'controllers', 'directives', 'filters', 'services']; // , 'views'];

for (const modulePath of modulePaths) {
  const dir = dirname(modulePath);
  const name = basename(modulePath).replace(/\..+/, '');

  const code = [];

  code.push('// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT\n// regenerate by running node generate-modules.js');

  code.push('import AppConfig from \'@/modules/core/client/app/config\';');

  if (name === 'core') {
    code.push(`AppConfig.registerModule('${name}');`);
  } else {
    code.push('import \'@/modules/core/client/core.client.module\';');
    code.push(`AppConfig.registerModule('${name}', ['core']);`);
  }

  code.push(...types.map(type => {
    const files = glob.sync(join(dir, type, '**/*.*')).map(entry => `require('@/${entry.replace(/\.js$/, '')}');`);
    if (files.length === 0) return;
    return [`// ${type}`, ...files].join('\n');
  }));

  const source = compact(code).join('\n\n');

  copyFileSync(modulePath, modulePath + '.bak');
  writeFileSync(modulePath, source, 'utf8');
}
